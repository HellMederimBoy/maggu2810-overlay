--- vdr2avi	2008-05-10 16:01:47.000000000 +0200
+++ /usr/bin/vdr2avi	2008-05-10 16:13:11.000000000 +0200
@@ -77,7 +77,7 @@
 	ms_delta="9999999"
 	buf_st=$1
 	while read -r line; do
-		echo -e "\tChecking line `$line`" >&2
+		echo -e "\tChecking line '$line'" >&2
 		if [[ "$line" =~ Logo\ start ]]; then
 			ms=`conv_time_to_sec "$line"`
 			if [ -z $ms ]; then
@@ -103,7 +103,7 @@
 # Use the last logo lost or IFrame mark in the marks file
 function get_movie_end() {
 	while read -r line; do
-		echo -e "\tChecking line `$line`" >&2
+		echo -e "\tChecking line '$line'" >&2
 		if [[ "$line" =~ (Logo\ lost|last\ IFrame) ]]; then
 			ms=`conv_time_to_sec "$line"`
 			echo "Line has timecode $ms" >&2
@@ -150,6 +150,7 @@
 		fi
 	done
 	[ "$ad_start" ] && echo "Error: Missing end of advertising after position $ad_start" >&2
+	return 0 # always return true
 }
 
 function get_most_used() {
@@ -357,7 +358,7 @@
 	v=`head -n 1 "$TMP_PATH/$VID_NAME.edl.new"`
 	[[ "$v" =~ ^([0-9]*)\.([0-9]*)\ *([0-9]*)\.([0-9]*)\ ([0-9])$ ]]
 	vstart=${BASH_REMATCH[1]}
-	[ "$vstart" -a 10#$vstart -le 5 ] && \
+	[ "$vstart" ] && [ $vstart -le 5 ] && \
 		sed -i "s/^${BASH_REMATCH[1]}\.${BASH_REMATCH[2]} /0000.0000 /" "$TMP_PATH/$VID_NAME.edl.new"
 	v=`tail -n 1 "$TMP_PATH/$VID_NAME.edl.new"`
 	[[ "$v" =~ ^([0-9]*)\.([0-9]*)\ *([0-9]*)\.([0-9]*)\ ([0-9])$ ]]
@@ -365,6 +366,7 @@
 	vend=${BASH_REMATCH[3]}
 	[ "$vstart" -a "$vend" -a $[ $end - $vstart ] -le 5 ] && \
 		sed -i "s/ ${BASH_REMATCH[3]}\.${BASH_REMATCH[4]} / 999999.9999 /" "$TMP_PATH/$VID_NAME.edl.new"
+	return 0 # always return true
 }
 
 function user_edit_mpeg() {
@@ -490,7 +492,7 @@
 		[[ `cat "$TMP_PATH/$VID_NAME.crop"` =~ ^([0-9]*):([0-9]*)$ ]]
 		cropw=${BASH_REMATCH[1]}
 		croph=${BASH_REMATCH[2]}
-		[ "$cropw" -a "$croph" ] && [ 10#$cropw -lt 10#$MPG_WIDTH -o 10#$croph -lt 10#$MPG_HEIGHT ] && \
+		[ "$cropw" -a "$croph" ] && [ $cropw -lt $MPG_WIDTH -o $croph -lt $MPG_HEIGHT ] && \
 			cropstr="-vf-add crop=$cropw:$croph"
 	fi
 	
@@ -538,7 +540,7 @@
 		-ovc $MENCODER_VIDEO_CODEC -${MENCODER_VIDEO_CODEC}encopts pass=1:bitrate=$video:$MENCODER_VIDEO_OPTS_PASS1 \
 		$cropstr $a_start \
 		`[ $MENCODER_DEINT ] && echo "-vf-add $MENCODER_DEINT"` \
-		`[ $width -lt 10#$MPG_WIDTH ] && echo " -sws $MENCODER_SWSCALER -vf-add scale=$width:-3 "` \
+		`[ $width -lt $MPG_WIDTH ] && echo " -sws $MENCODER_SWSCALER -vf-add scale=$width:-3 "` \
 		-o /dev/null $TMP_PATH/$VID_NAME.mpg"
 	echo $cmd
 	$cmd
@@ -548,7 +550,7 @@
 		-ovc $MENCODER_VIDEO_CODEC -${MENCODER_VIDEO_CODEC}encopts pass=2:bitrate=$video:$MENCODER_VIDEO_OPTS_PASS2 \
 		$cropstr $a_start \
 		`[ $MENCODER_DEINT ] && echo "-vf-add $MENCODER_DEINT"` \
-		`[ $width -lt 10#$MPG_WIDTH ] && echo " -sws $MENCODER_SWSCALER -vf-add scale=$width:-3 "` \
+		`[ $width -lt $MPG_WIDTH ] && echo " -sws $MENCODER_SWSCALER -vf-add scale=$width:-3 "` \
 		-o $TRG_PATH/${VID_NAME}_$qual.avi $TMP_PATH/$VID_NAME.mpg"
 	echo $cmd
 	$cmd
@@ -581,9 +583,10 @@
 	# Make $VID_DIR relative to $VID_PATH if absolute
 	[[ "$1" =~ ^$VID_PATH/(.*) ]] && VID_DIR="${BASH_REMATCH[1]}" || VID_DIR="$1"
 
-	[[ "$VID_DIR" =~ ^(.*)\.[0-9][0-9]\.[0-9][0-9]\.rec$ ]] && VID_DIR="${BASH_REMATCH[1]}" # remove vdr priority
-	VID_DIR=${VID_DIR//\//-} # subst all / with -
-	VID_DIR=${VID_DIR//[^a-zA-Z0-9._-]/_} # subst all special characters with _
+	VID_NAME=$VID_DIR
+	[[ "$VID_NAME" =~ ^(.*)\.[0-9][0-9]\.[0-9][0-9]\.rec$ ]] && VID_NAME="${BASH_REMATCH[1]}" # remove vdr priority
+	VID_NAME=${VID_NAME//\//-} # subst all / with -
+	VID_NAME=${VID_NAME//[^a-zA-Z0-9._-]/_} # subst all special characters with _
 	
 	if [ -z "$VID_NAME" -o -z "$VID_DIR" ]; then
 		echo "Path of video is missing or incorrect: '$VID_DIR' '$VID_NAME'"
--- vdr2avi-auto	2008-05-09 14:46:59.000000000 +0200
+++ /usr/bin/vdr2avi-auto	2008-05-10 16:35:22.000000000 +0200
@@ -21,7 +21,7 @@
 		return
 	fi
 
-	mv -f $TMP_PATH/$movie.{crop,edl,mpg,rdy1,rdy2} $TMP_PATH/done
+	mv -f $TMP_PATH/$movie.{crop,edl,mpg,rdy1,rdy2} $TMP_PATH/done >/dev/null || : # dont fail on missing files
 }
 
 function auto_convert_to_avi() {
@@ -31,7 +31,7 @@
 	fi
 
 	tmp_file=`mktemp`
-	$vdr_sh 0 | grep "[23]$" | cut -d " " -f 2 | sort > $tmp_file
+	vdr2avi 0 | grep "[23]$" | cut -d " " -f 2 | sort > $tmp_file
 
 	# Check if a .avi target file exists for any video in our list
 	tmp_file_new=`mktemp`
@@ -64,15 +64,19 @@
 
 	# Process the video, if we have found one
 	[ "$movie" ] && auto_convert_movie_to_avi $movie
+	return 0 # always return true
 }
 
 if [ "$1" == "-intern-" ]; then
 	shift
 	auto_convert_to_avi $*
 else
-	cpu_nr=$1
-	shift
-	[ "$cpu_nr" ] || cpu_nr=1 
+	if [ "$1" ]; then
+		cpu_nr=$1
+		shift
+	else
+		cpu_nr=1
+	fi
 	lockfile=${LOCK_FILE}${cpu_nr}.lock
 	touch $lockfile
 	flock --timeout=0 $lockfile $0 -intern- $*
