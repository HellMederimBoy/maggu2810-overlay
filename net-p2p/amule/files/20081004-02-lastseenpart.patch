--- src.org/DownloadListCtrl.cpp
+++ src/DownloadListCtrl.cpp
@@ -198,6 +198,7 @@ CMuleListCtrl( parent, winid, pos, size,
 	InsertColumn( ColumnLastSeenComplete, _("Last Seen Complete"),	wxLIST_FORMAT_LEFT, 220, wxT("c") );
 	InsertColumn( ColumnLastReception,	_("Last Reception"),		wxLIST_FORMAT_LEFT, 220, wxT("R") );
 	InsertColumn( ColumnGained,			_("Gained"),		wxLIST_FORMAT_LEFT, 100, wxT("xG") );
+	InsertColumn( ColumnLastSeenPart,	_("Last Seen Part"),		wxLIST_FORMAT_LEFT, 220, wxT("xP") );
 
 	m_category = 0;
 	m_completedFiles = 0;
@@ -1468,6 +1469,16 @@ void CDownloadListCtrl::DrawFileItem( wx
 		}
 		break;
 	}
+
+	// Last seen part
+	case ColumnLastSeenPart: {
+		if (file->lastseenpart) {
+			text = wxDateTime( file->lastseenpart ).Format( _("%y/%m/%d %H:%M") );
+		} else {
+			text = _("Unknown");
+		}
+		break;
+	}
 	} // switch
 
 	if ( !text.IsEmpty() ) {
@@ -2005,6 +2016,13 @@ int CDownloadListCtrl::Compare( const CP
 			(sint64) file1->GetCompletedSize() - (sint64) file1->GetTransferred(),
 			(sint64) file2->GetCompletedSize() - (sint64) file2->GetTransferred() );
 		break;
+
+	// Sort by last seen part
+	case ColumnLastSeenPart:
+		result = CmpAny(
+			file1->lastseenpart,
+			file2->lastseenpart );
+		break;
 	}
 
 	return result;
--- src.org/DownloadListCtrl.h
+++ src/DownloadListCtrl.h
@@ -312,7 +312,8 @@ private:
 		ColumnLastSeenComplete,
 		ColumnLastReception,
 		ColumnNumberOfColumns,
-		ColumnGained
+		ColumnGained,
+		ColumnLastSeenPart
 	};
 };
 
--- src.org/FileDetailDialog.cpp
+++ src/FileDetailDialog.cpp
@@ -133,6 +133,13 @@ void CFileDetailDialog::UpdateData()
 		bufferS = last_seen.FormatISODate() + wxT(" ") + last_seen.FormatISOTime();
 	}
 
+	if (m_file->lastseenpart==0) {
+		bufferS += wxString(_(" (Unknown)")).MakeLower();
+	} else {
+		wxDateTime last_seen(m_file->lastseenpart);
+		bufferS += wxT(" (") + last_seen.FormatISODate() + wxT(" ") + last_seen.FormatISOTime() + wxT(")");
+	}
+	
 	CastChild(IDC_LASTSEENCOMPL,wxControl)->SetLabel(bufferS);
 	setEnableForApplyButton();
 	// disable "Show all comments" button if there are no comments
--- src.org/include/tags/FileTags.h
+++ src/include/tags/FileTags.h
@@ -33,6 +33,7 @@
 #define	FT_FILETYPE			0x03	// <string> or <uint32>
 #define	FT_FILEFORMAT			0x04	// <string>
 #define	FT_LASTSEENCOMPLETE		0x05	// <uint32>
+#define	FT_LASTSEENPART			0xC6	// <uint32>
 #define	FT_TRANSFERRED			0x08	// <uint32>
 #define	FT_GAPSTART			0x09	// <uint32>
 #define	FT_GAPEND			0x0A	// <uint32>
--- src.org/muuli_wdr.cpp
+++ src/muuli_wdr.cpp
@@ -623,7 +623,7 @@ wxSizer *fileDetails( wxWindow *parent, 
 
     wxBoxSizer *item19 = new wxBoxSizer( wxHORIZONTAL );
 
-    wxStaticText *item20 = new wxStaticText( parent, -1, _("Last seen complete :"), wxDefaultPosition, wxDefaultSize, 0 );
+    wxStaticText *item20 = new wxStaticText( parent, -1, _("Last seen complete (part) :"), wxDefaultPosition, wxDefaultSize, 0 );
     item19->Add( item20, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxLEFT, 5 );
 
     wxStaticText *item21 = new wxStaticText( parent, IDC_LASTSEENCOMPL, _("N/A"), wxDefaultPosition, wxDefaultSize, 0 );
--- src.org/PartFile.cpp
+++ src/PartFile.cpp
@@ -387,7 +387,29 @@ uint8 CPartFile::LoadPartFile(const CPat
 
 		uint32 tagcount = metFile.ReadUInt32();
 
-		for (uint32 j = 0; j < tagcount; ++j) {
+		for (uint32 j = 0; ; ++j) {
+			
+			// bugfix if written tagcount misses a tag
+			if (j >= tagcount) {
+				break; // we don't check for buggy .met's any more
+				if (metFile.GetPosition() + 6 >= metFile.GetLength()) {
+					break;
+				}
+				// only accept gap tags at this point
+				uint8 type = metFile.ReadUInt8();
+				uint16 len = metFile.ReadUInt16();
+				uint8 mark = metFile.ReadUInt8();
+				metFile.Seek(-4, wxFromCurrent);
+				if ((type != TAGTYPE_UINT32 && type != TAGTYPE_UINT64) ||
+					(len < 2) || // min 1 number
+					(len > 15) || // max 14 numbers
+					(mark != FT_GAPSTART && mark != FT_GAPEND)) {
+					// this is really the end of the tag list
+					break;
+				}
+				AddLogLineM(true, CFormat(wxT("Found a tag after list of tags in %s. Old buggy .met file !?")) % filename);
+			}
+			
 			CTag newtag(metFile,true);
 			if (	!getsizeonly ||
 				(getsizeonly && 
@@ -403,6 +425,13 @@ uint8 CPartFile::LoadPartFile(const CPat
 					}
 					case FT_LASTSEENCOMPLETE: {
 						lastseencomplete = newtag.GetInt();		
+						if (!lastseenpart) {
+							lastseenpart = lastseencomplete;
+						}
+						break;
+					}
+					case FT_LASTSEENPART: {
+						lastseenpart = newtag.GetInt();
 						break;
 					}
 					case FT_FILESIZE: {
@@ -750,6 +779,7 @@ bool CPartFile::SavePartFile(bool Initia
 		}
 		
 		uint32 lsc = lastseencomplete;
+		uint32 lsp = lastseenpart;
 
 		if (!Initial) {
 			CPath::BackupFile(m_fullname, wxT(".backup"));
@@ -773,7 +803,7 @@ bool CPartFile::SavePartFile(bool Initia
 			file.WriteHash(m_hashlist[x]);
 		}
 		// tags		
-		#define FIXED_TAGS 15
+		#define FIXED_TAGS 16
 		uint32 tagcount = m_taglist.size() + FIXED_TAGS + (m_gaplist.size()*2);
 		if (!m_corrupted_list.empty()) {			
 			++tagcount;
@@ -818,6 +848,7 @@ bool CPartFile::SavePartFile(bool Initia
 		}
 
 		CTagInt32( FT_LASTSEENCOMPLETE,	lsc			).WriteTagToFile( &file );	// 7
+		CTagInt32( FT_LASTSEENPART,	lsp			).WriteTagToFile( &file );
 
 		if ( IsAutoUpPriority() ) {
 			CTagInt32( FT_ULPRIORITY,	(uint8)PR_AUTO	).WriteTagToFile( &file );	// 8
@@ -3696,6 +3727,24 @@ void CPartFile::UpdatePartsFrequency( CU
 	}
 	
 	if ( increment ) {
+		
+		bool foundMissingPart = false;
+		CPartFile::CGapPtrList::const_iterator it = m_gaplist.begin();
+		for (; it != m_gaplist.end() && !foundMissingPart; ++it) {
+			Gap_Struct* gap = *it;
+			// Start position
+			uint32 start = gap->start / PARTSIZE;
+			// End position
+			uint32 end = gap->end / PARTSIZE + 1;
+			// Check if the client has one of our missing parts
+			for (uint32 i = start; !foundMissingPart && i < end && i < size; i++) {
+				if (freq[i]) {
+					lastseenpart = time(NULL);
+					foundMissingPart = true;
+				}
+			}
+		}
+		
 		for ( unsigned int i = 0; i < size; i++ ) {
 			if ( freq[i] ) {
 				m_SrcpartFrequency[i]++;
@@ -3821,6 +3870,7 @@ void CPartFile::Init()
 	completedsize=0;
 	m_bPreviewing = false;
 	lastseencomplete = 0;
+	lastseenpart = 0;
 	m_availablePartsCount=0;
 	m_ClientSrcAnswered = 0;
 	m_LastNoNeededCheck = 0;
--- src.org/PartFile.h
+++ src/PartFile.h
@@ -172,6 +172,7 @@ public:
 	wxString getPartfileStatus() const; //<<--9/21/02
 	sint32	getTimeRemaining() const; //<<--9/21/02
 	time_t	lastseencomplete;
+	time_t	lastseenpart;
 	int	getPartfileStatusRang() const;
 
 	// Barry - Added as replacement for BlockReceived to buffer data before writing to disk
