--- src.org/DownloadListCtrl.cpp
+++ src/DownloadListCtrl.cpp
@@ -197,6 +197,7 @@ CMuleListCtrl( parent, winid, pos, size,
 	InsertColumn( ColumnTimeRemaining,  _("Time Remaining"),		wxLIST_FORMAT_LEFT, 110, wxT("r") );
 	InsertColumn( ColumnLastSeenComplete, _("Last Seen Complete"),	wxLIST_FORMAT_LEFT, 220, wxT("c") );
 	InsertColumn( ColumnLastReception,	_("Last Reception"),		wxLIST_FORMAT_LEFT, 220, wxT("R") );
+	InsertColumn( ColumnGained,			_("Gained"),		wxLIST_FORMAT_LEFT, 100, wxT("xG") );
 
 	m_category = 0;
 	m_completedFiles = 0;
@@ -1314,6 +1315,8 @@ void CDownloadListCtrl::DrawFileItem( wx
 		if ( file->GetTransferingSrcCount() ) {
 			text = wxString::Format( wxT("%.1f "), file->GetKBpsDown() ) +
 				_("kB/s");
+		} else {
+			text = file->getPartfileStatus();
 		}
 		break;
 
@@ -1437,7 +1440,7 @@ void CDownloadListCtrl::DrawFileItem( wx
 	// Last seen completed
 	case ColumnLastSeenComplete: {
 		if ( file->lastseencomplete ) {
-			text = wxDateTime( file->lastseencomplete ).Format( _("%y/%m/%d %H:%M:%S") );
+			text = wxDateTime( file->lastseencomplete ).Format( _("%y/%m/%d %H:%M") );
 		} else {
 			text = _("Unknown");
 		}
@@ -1448,10 +1451,22 @@ void CDownloadListCtrl::DrawFileItem( wx
 	case ColumnLastReception: {
 		const time_t lastReceived = file->GetLastChangeDatetime();
 		if (lastReceived) {
-			text = wxDateTime(lastReceived).Format( _("%y/%m/%d %H:%M:%S") );
+			text = wxDateTime(lastReceived).Format( _("%y/%m/%d %H:%M") );
 		} else {
 			text = _("Unknown");
 		}
+		break;
+	}
+
+	// Gained
+	case ColumnGained: {
+		sint64 gained = (sint64) file->GetCompletedSize() - (sint64) file->GetTransferred();
+		if (gained < 0) {
+			text = wxT("-") + CastItoXBytes( -gained );
+		} else {
+			text = wxT("+") + CastItoXBytes( gained );
+		}
+		break;
 	}
 	} // switch
 
@@ -1721,12 +1736,13 @@ void CDownloadListCtrl::DrawSourceItem(
 						}
 						if( qrDiff > 0 ) {
 							dc->SetTextForeground(*wxRED);
+							buffer = wxString::Format(_("+%i"), qrDiff);
+						} else {
+							buffer = wxString::Format(_("%i"), qrDiff);
 						}
 						//if( qrDiff == 0 ) {
 						//	dc->SetTextForeground(*wxLIGHT_GREY);
 						//}
-						buffer = wxString::Format(_("QR: %u (%i)"),
-							client->GetRemoteQueueRank(), qrDiff);
 						dc->DrawText(buffer, rect.GetX(), rect.GetY());
 						dc->SetTextForeground(savedColour);
 					}
@@ -1754,6 +1770,46 @@ void CDownloadListCtrl::DrawSourceItem(
 			dc->DrawText(buffer, rect.GetX(), rect.GetY());
 			break;
 		}	
+		// position (last reception field)
+		case ColumnLastReception:
+			if (	item->GetType() != A4AF_SOURCE &&
+				client->GetDownloadState() == DS_ONQUEUE ) {
+				if (client->IsRemoteQueueFull()) {
+					buffer = _("Queue Full");
+					dc->DrawText(buffer, rect.GetX(), rect.GetY());
+				} else {
+					if (client->GetRemoteQueueRank()) {
+						buffer = wxString::Format(_("  # %u"), client->GetRemoteQueueRank());
+						dc->DrawText(buffer, rect.GetX(), rect.GetY());
+					}
+				}
+			}
+			break;
+		// upload speed (last seen complete field)
+		case ColumnLastSeenComplete:
+			if (client->GetUploadDatarate() > 0.001) {
+				buffer = wxString::Format(wxT("%.1f "),
+						client->GetUploadDatarate()) + _("kB/s");
+				dc->DrawText(buffer, rect.GetX(), rect.GetY());
+			}
+			break;
+		// transferred up (gained field)
+		case ColumnGained: {
+			if (client->GetTransferredUp()) {
+				buffer = CastItoXBytes(client->GetTransferredUp());
+				dc->DrawText(buffer, rect.GetX(), rect.GetY());
+			}
+			break;
+		}
+		// flags (part field)
+		case ColumnPart: {
+			buffer = wxT("");
+			if (client->IsSupportingAICH()) buffer + wxT("A");
+			if (client->SupportsLargeFiles()) buffer + wxT("L");
+			if (client->NoViewSharedFiles()) buffer + wxT("N");
+			dc->DrawText(buffer, rect.GetX(), rect.GetY());
+			break;
+		}
 	}
 }
 
@@ -1875,6 +1931,9 @@ int CDownloadListCtrl::Compare( const CP
 	// Sort by speed
 	case ColumnSpeed:
 		result = CmpAny(
+			file1->getPartfileStatusRang(),
+			file2->getPartfileStatusRang() );
+		if (!result) result = CmpAny(
 			file1->GetKBpsDown() * 1024,
 			file2->GetKBpsDown() * 1024 );
 		break;
@@ -1939,6 +1998,13 @@ int CDownloadListCtrl::Compare( const CP
 			file1->GetLastChangeDatetime(),
 			file2->GetLastChangeDatetime() );
 		break;
+
+	// Sort by gained
+	case ColumnGained:
+		result = CmpAny(
+			(sint64) file1->GetCompletedSize() - (sint64) file1->GetTransferred(),
+			(sint64) file2->GetCompletedSize() - (sint64) file2->GetTransferred() );
+		break;
 	}
 
 	return result;
@@ -1950,7 +2016,6 @@ int CDownloadListCtrl::Compare(
 {
 	switch (lParamSort) {
 		// Sort by name
-		case ColumnPart:
 		case ColumnFileName:
 			return CmpAny( client1->GetUserName(), client2->GetUserName() );
 	
@@ -2040,6 +2105,23 @@ int CDownloadListCtrl::Compare(
 		case ColumnTimeRemaining:
 			return CmpAny(client1->GetSourceFrom(), client2->GetSourceFrom());
 		
+		// Sort by upload speed
+		case ColumnLastReception:
+			return CmpAny( client1->GetUploadDatarate(), client2->GetUploadDatarate() );
+		
+		// Sort by transferred up
+		case ColumnLastSeenComplete:
+			return CmpAny( client1->GetTransferredUp(), client2->GetTransferredUp() );
+		
+		// Sort by flags
+		case ColumnPart: {
+			bool res = CmpAny( client1->IsSupportingAICH(), client2->IsSupportingAICH() );
+			if (res) return res;
+			res = CmpAny( client1->SupportsLargeFiles(), client2->SupportsLargeFiles() );
+			if (res) return res;
+			return CmpAny( client1->NoViewSharedFiles(), client2->NoViewSharedFiles() );
+		}
+		
 		default:
 			return 0;
 	}
--- src.org/DownloadListCtrl.h
+++ src/DownloadListCtrl.h
@@ -311,7 +311,8 @@ private:
 		ColumnTimeRemaining,
 		ColumnLastSeenComplete,
 		ColumnLastReception,
-		ColumnNumberOfColumns
+		ColumnNumberOfColumns,
+		ColumnGained
 	};
 };
 
--- src.org/updownclient.h
+++ src/updownclient.h
@@ -612,6 +612,8 @@ public:
 	
 	bool		SupportsLargeFiles() const { return m_fSupportsLargeFiles; }
 	
+	bool 		NoViewSharedFiles() const { return m_fNoViewSharedFiles; }
+	
 	#ifdef __DEBUG__
 	/* Kry - Debug. See connection_reason definition comment below */
 	void		SetConnectionReason(const wxString& reason) { connection_reason = reason; }
