--- src.org/PartFile.cpp
+++ src/PartFile.cpp
@@ -411,6 +411,7 @@ uint8 CPartFile::LoadPartFile(const wxSt
 					 newtag.GetNameID() == FT_FILENAME))) {
 				switch(newtag.GetNameID()) {
 					case FT_FILENAME: {
+						AddDebugLogLineM(false, logPartFile, CFormat( wxT("%s: Tag FNAME: %s") ) % filename % newtag.GetStr());
 						if (GetFileName().IsEmpty()) {
 							// If it's not empty, we already loaded the unicoded one
 							SetFileName(newtag.GetStr());
@@ -418,6 +419,7 @@ uint8 CPartFile::LoadPartFile(const wxSt
 						break;
 					}
 					case FT_LASTSEENCOMPLETE: {
+						AddDebugLogLineM(false, logPartFile, CFormat( wxT("%s: Tag LSCOMPL: %d") ) % filename % newtag.GetInt());
 						lastseencomplete = newtag.GetInt();		
 						if (!lastseenpart) {
 							lastseenpart = lastseencomplete;
@@ -425,23 +427,28 @@ uint8 CPartFile::LoadPartFile(const wxSt
 						break;
 					}
 					case FT_LASTSEENPART: {
+						AddDebugLogLineM(false, logPartFile, CFormat( wxT("%s: Tag LSPART: %d") ) % filename % newtag.GetInt());
 						lastseenpart = newtag.GetInt();
 						break;
 					}
 					case FT_FILESIZE: {
+						AddDebugLogLineM(false, logPartFile, CFormat( wxT("%s: Tag SIZE: %d") ) % filename % newtag.GetInt());
 						SetFileSize(newtag.GetInt());
 						break;
 					}
 					case FT_TRANSFERRED: {
+						AddDebugLogLineM(false, logPartFile, CFormat( wxT("%s: Tag TRANS: %d") ) % filename % newtag.GetInt());
 						transferred = newtag.GetInt();
 						break;
 					}
 					case FT_FILETYPE:{
+						AddDebugLogLineM(false, logPartFile, CFormat( wxT("%s: Tag FTYPE: %s") ) % filename % newtag.GetStr());
 						//#warning needs setfiletype string
 						//SetFileType(newtag.GetStr());
 						break;
 					}					
 					case FT_CATEGORY: {
+						AddDebugLogLineM(false, logPartFile, CFormat( wxT("%s: Tag CAT: %d") ) % filename % newtag.GetInt());
 						m_category = newtag.GetInt();
 						if (m_category > theApp->glob_prefs->GetCatCount() - 1 ) {
 							m_category = 0;
@@ -450,6 +457,7 @@ uint8 CPartFile::LoadPartFile(const wxSt
 					}
 					case FT_OLDDLPRIORITY:
 					case FT_DLPRIORITY: {
+						AddDebugLogLineM(false, logPartFile, CFormat( wxT("%s: Tag DLPRIO: %d") ) % filename % newtag.GetInt());
 						if (!isnewstyle){
 							m_iDownPriority = newtag.GetInt();
 							if( m_iDownPriority == PR_AUTO ){
@@ -467,12 +475,14 @@ uint8 CPartFile::LoadPartFile(const wxSt
 						break;
 					}
 					case FT_STATUS: {
+						AddDebugLogLineM(false, logPartFile, CFormat( wxT("%s: Tag STATUS: %d") ) % filename % newtag.GetInt());
 						m_paused = newtag.GetInt();
 						m_stopped = m_paused;
 						break;
 					}
 					case FT_OLDULPRIORITY:
 					case FT_ULPRIORITY: {			
+						AddDebugLogLineM(false, logPartFile, CFormat( wxT("%s: Tag ULPRIO: %d") ) % filename % newtag.GetInt());
 						if (!isnewstyle){
 							SetUpPriority(newtag.GetInt(), false);
 							if( GetUpPriority() == PR_AUTO ){
@@ -485,6 +495,7 @@ uint8 CPartFile::LoadPartFile(const wxSt
 						break;
 					}				
 					case FT_KADLASTPUBLISHSRC:{
+						AddDebugLogLineM(false, logPartFile, CFormat( wxT("%s: Tag KADLPS: %d") ) % filename % newtag.GetInt());
 						SetLastPublishTimeKadSrc(newtag.GetInt(), 0);
 						if(GetLastPublishTimeKadSrc() > (uint32)time(NULL)+KADEMLIAREPUBLISHTIMES) {
 							//There may be a posibility of an older client that saved a random number here.. This will check for that..
@@ -493,6 +504,7 @@ uint8 CPartFile::LoadPartFile(const wxSt
 						break;
 					}
 					case FT_KADLASTPUBLISHNOTES:{
+						AddDebugLogLineM(false, logPartFile, CFormat( wxT("%s: Tag KADLPN: %d") ) % filename % newtag.GetInt());
 						SetLastPublishTimeKadNotes(newtag.GetInt());
 						break;
 					}					
@@ -502,10 +514,12 @@ uint8 CPartFile::LoadPartFile(const wxSt
 						break;
 					case FT_DL_ACTIVE_TIME:
 						if (newtag.IsInt()) {
+							AddDebugLogLineM(false, logPartFile, CFormat( wxT("%s: Tag DLACT: %d") ) % filename % newtag.GetInt());
 							m_nDlActiveTime = newtag.GetInt();
 						}
 						break;
 					case FT_CORRUPTEDPARTS: {
+						AddDebugLogLineM(false, logPartFile, CFormat( wxT("%s: Tag CORRPARTS: %s") ) % filename % newtag.GetStr());
 						wxASSERT(m_corrupted_list.empty());
 						wxString strCorruptedParts(newtag.GetStr());
 						wxStringTokenizer tokenizer(strCorruptedParts, wxT(","));
@@ -521,6 +535,7 @@ uint8 CPartFile::LoadPartFile(const wxSt
 						break;
 					}
 					case FT_AICH_HASH:{
+						AddDebugLogLineM(false, logPartFile, CFormat( wxT("%s: Tag HASH: %s") ) % filename % newtag.GetStr());
 						CAICHHash hash;
 						bool hashSizeOk =
 							hash.DecodeBase32(newtag.GetStr()) == CAICHHash::GetHashSize();
@@ -531,18 +546,22 @@ uint8 CPartFile::LoadPartFile(const wxSt
 						break;
 					}
 					case FT_ATTRANSFERRED:{
+						AddDebugLogLineM(false, logPartFile, CFormat( wxT("%s: Tag ATT_LO: %d") ) % filename % newtag.GetInt());
 						statistic.SetAllTimeTransferred(statistic.GetAllTimeTransferred() + (uint64)newtag.GetInt());
 						break;
 					}
 					case FT_ATTRANSFERREDHI:{
+						AddDebugLogLineM(false, logPartFile, CFormat( wxT("%s: Tag ATT_HI: %d") ) % filename % newtag.GetInt());
 						statistic.SetAllTimeTransferred(statistic.GetAllTimeTransferred() + (((uint64)newtag.GetInt()) << 32));	
 						break;
 					}
 					case FT_ATREQUESTED:{
+						AddDebugLogLineM(false, logPartFile, CFormat( wxT("%s: Tag ATR: %d") ) % filename % newtag.GetInt());
 						statistic.SetAllTimeRequests(newtag.GetInt());
 						break;
 					}
 					case FT_ATACCEPTED:{
+						AddDebugLogLineM(false, logPartFile, CFormat( wxT("%s: Tag ATA: %d") ) % filename % newtag.GetInt());
 						statistic.SetAllTimeAccepts(newtag.GetInt());
 						break;
 					}
@@ -551,6 +570,7 @@ uint8 CPartFile::LoadPartFile(const wxSt
 						
 						wxCharBuffer tag_ansi_name = newtag.GetName().ToAscii();
 						char gap_mark = tag_ansi_name ? tag_ansi_name[0u] : 0;
+						if (newtag.IsInt()) AddDebugLogLineM(false, logPartFile, CFormat( wxT("%s: Tag GAP %d: key %s pos %d") ) % filename % gap_mark % newtag.GetName().Mid(1) % newtag.GetInt());
 						if ( newtag.IsInt() && (newtag.GetName().Length() > 1) &&
 							((gap_mark == FT_GAPSTART) ||
 							 (gap_mark == FT_GAPEND))) {
@@ -577,6 +597,7 @@ uint8 CPartFile::LoadPartFile(const wxSt
 							}
 							// End Changes by Slugfiller for better exception handling
 						} else {
+							AddDebugLogLineM(false, logPartFile, CFormat( wxT("%s: Unknown Tag %d %s of type %d") ) % filename % newtag.GetNameID() % newtag.GetName() % newtag.GetType());
 							m_taglist.push_back(newtag);
 						}
 					}
@@ -826,35 +847,52 @@ bool CPartFile::SavePartFile(bool Initia
 		
 		// 0 (unicoded part file name) 
 		// We write it with BOM to kep eMule compatibility
+		wxString filename = m_fullname.Left(m_fullname.Length() - 4).Mid(GetFilePath().Length() + 1);
+		AddDebugLogLineM(false, logPartFile, CFormat( wxT("%s: Tag FNAME: %s") ) % filename % GetFileName());
 		CTagString(	FT_FILENAME,	GetFileName()).WriteTagToFile( &file, utf8strOptBOM );
+		AddDebugLogLineM(false, logPartFile, CFormat( wxT("%s: Tag FNAME: %s") ) % filename % GetFileName());
 		CTagString(	FT_FILENAME,	GetFileName()).WriteTagToFile( &file );                         // 1
+		AddDebugLogLineM(false, logPartFile, CFormat( wxT("%s: Tag SIZE: %d") ) % filename % GetFileSize());
 		CTagIntSized(	FT_FILESIZE,	GetFileSize(), IsLargeFile() ? 64 : 32).WriteTagToFile( &file );// 2
+		AddDebugLogLineM(false, logPartFile, CFormat( wxT("%s: Tag TRANS: %d") ) % filename % transferred);
 		CTagIntSized(	FT_TRANSFERRED,	transferred, IsLargeFile() ? 64 : 32).WriteTagToFile( &file );   // 3
+		AddDebugLogLineM(false, logPartFile, CFormat( wxT("%s: Tag STATUS: %d") ) % filename % (m_paused?1:0));
 		CTagInt32(	FT_STATUS,	(m_paused?1:0)).WriteTagToFile( &file );                        // 4
 
 		if ( IsAutoDownPriority() ) {
+			AddDebugLogLineM(false, logPartFile, CFormat( wxT("%s: Tag DLPRIO: %d") ) % filename % (uint8)PR_AUTO);
 			CTagInt32( FT_DLPRIORITY,	(uint8)PR_AUTO	).WriteTagToFile( &file );	// 5
 			CTagInt32( FT_OLDDLPRIORITY,	(uint8)PR_AUTO	).WriteTagToFile( &file );	// 6
 		} else {
+			AddDebugLogLineM(false, logPartFile, CFormat( wxT("%s: Tag DLPRIO: %d") ) % filename % m_iDownPriority);
 			CTagInt32( FT_DLPRIORITY,	m_iDownPriority	).WriteTagToFile( &file );	// 5
 			CTagInt32( FT_OLDDLPRIORITY,	m_iDownPriority	).WriteTagToFile( &file );	// 6
 		}
 
+		AddDebugLogLineM(false, logPartFile, CFormat( wxT("%s: Tag LSCOMPL: %d") ) % filename % lsc);
 		CTagInt32( FT_LASTSEENCOMPLETE,	lsc			).WriteTagToFile( &file );	// 7
+		AddDebugLogLineM(false, logPartFile, CFormat( wxT("%s: Tag LSPART: %d") ) % filename % lsp);
 		CTagInt32( FT_LASTSEENPART,	lsp			).WriteTagToFile( &file );
 
 		if ( IsAutoUpPriority() ) {
+			AddDebugLogLineM(false, logPartFile, CFormat( wxT("%s: Tag ULPRIO: %d") ) % filename % (uint8)PR_AUTO);
 			CTagInt32( FT_ULPRIORITY,	(uint8)PR_AUTO	).WriteTagToFile( &file );	// 8
 			CTagInt32( FT_OLDULPRIORITY,	(uint8)PR_AUTO	).WriteTagToFile( &file );	// 9
 		} else {
+			AddDebugLogLineM(false, logPartFile, CFormat( wxT("%s: Tag ULPRIO: %d") ) % filename % GetUpPriority());
 			CTagInt32( FT_ULPRIORITY,	GetUpPriority() ).WriteTagToFile( &file );	// 8
 			CTagInt32( FT_OLDULPRIORITY,	GetUpPriority() ).WriteTagToFile( &file );	// 9
 		}
 	
+		AddDebugLogLineM(false, logPartFile, CFormat( wxT("%s: Tag CAT: %d") ) % filename % m_category);
 		CTagInt32(FT_CATEGORY,       m_category).WriteTagToFile( &file );                       // 10
+		AddDebugLogLineM(false, logPartFile, CFormat( wxT("%s: Tag ATT_LO: %d") ) % filename % (statistic.GetAllTimeTransferred() & 0xFFFFFFFF));
 		CTagInt32(FT_ATTRANSFERRED,   statistic.GetAllTimeTransferred() & 0xFFFFFFFF).WriteTagToFile( &file );// 11
+		AddDebugLogLineM(false, logPartFile, CFormat( wxT("%s: Tag ATT_HI: %d") ) % filename % (statistic.GetAllTimeTransferred() >>32));
 		CTagInt32(FT_ATTRANSFERREDHI, statistic.GetAllTimeTransferred() >>32).WriteTagToFile( &file );// 12
+		AddDebugLogLineM(false, logPartFile, CFormat( wxT("%s: Tag ATR: %d") ) % filename % statistic.GetAllTimeRequests());
 		CTagInt32(FT_ATREQUESTED,    statistic.GetAllTimeRequests()).WriteTagToFile( &file );	// 13
+		AddDebugLogLineM(false, logPartFile, CFormat( wxT("%s: Tag ATA: %d") ) % filename % statistic.GetAllTimeAccepts());
 		CTagInt32(FT_ATACCEPTED,     statistic.GetAllTimeAccepts()).WriteTagToFile( &file );	// 14
 
 		// currupt part infos
@@ -870,28 +908,34 @@ bool CPartFile::SavePartFile(bool Initia
 			}
 			wxASSERT( !strCorruptedParts.IsEmpty() );
 			
+			AddDebugLogLineM(false, logPartFile, CFormat( wxT("%s: Tag CORRPARTS: %s") ) % filename % strCorruptedParts);
 			CTagString( FT_CORRUPTEDPARTS, strCorruptedParts ).WriteTagToFile( &file); // 11?
 		}
 
 		//AICH Filehash
 		if (m_pAICHHashSet->HasValidMasterHash() && (m_pAICHHashSet->GetStatus() == AICH_VERIFIED)){
+			AddDebugLogLineM(false, logPartFile, CFormat( wxT("%s: Tag HASH: %d") ) % filename % m_pAICHHashSet->GetMasterHash().GetString());
 			CTagString aichtag(FT_AICH_HASH, m_pAICHHashSet->GetMasterHash().GetString() );
 			aichtag.WriteTagToFile(&file); // 12?
 		}
 		
 		if (GetLastPublishTimeKadSrc()){
+			AddDebugLogLineM(false, logPartFile, CFormat( wxT("%s: Tag KADLPS: %d") ) % filename % GetLastPublishTimeKadSrc());
 			CTagInt32(FT_KADLASTPUBLISHSRC, GetLastPublishTimeKadSrc()).WriteTagToFile(&file); // 15? 
 		}
 		
 		if (GetLastPublishTimeKadNotes()){
+			AddDebugLogLineM(false, logPartFile, CFormat( wxT("%s: Tag KADLPN: %d") ) % filename % GetLastPublishTimeKadNotes());
 			CTagInt32(FT_KADLASTPUBLISHNOTES, GetLastPublishTimeKadNotes()).WriteTagToFile(&file); // 16? 
 		}		
 		
 		if (GetDlActiveTime()){
+			AddDebugLogLineM(false, logPartFile, CFormat( wxT("%s: Tag DLACT: %d") ) % filename % GetDlActiveTime());
 			CTagInt32(FT_DL_ACTIVE_TIME, GetDlActiveTime()).WriteTagToFile(&file); // 17
 		}
 
 		for (uint32 j = 0; j < (uint32)m_taglist.size();++j) {
+			AddDebugLogLineM(false, logPartFile, CFormat( wxT("%s: Unknown Tag %d %s of type %d") ) % filename % m_taglist[j].GetNameID() % m_taglist[j].GetName() % m_taglist[j].GetType());
 			m_taglist[j].WriteTagToFile(&file);
 		}
 		
@@ -903,9 +947,11 @@ bool CPartFile::SavePartFile(bool Initia
 			
 			// gap start = first missing byte but gap ends = first non-missing byte
 			// in edonkey but I think its easier to user the real limits
+			AddDebugLogLineM(false, logPartFile, CFormat( wxT("%s: Tag GAP %d: key %s pos %d") ) % filename % FT_GAPSTART % tagName.Mid(1) % (*it)->start);
 			tagName[0] = FT_GAPSTART;
 			CTagIntSized(tagName, (*it)->start		, IsLargeFile() ? 64 : 32).WriteTagToFile( &file );
 			
+			AddDebugLogLineM(false, logPartFile, CFormat( wxT("%s: Tag GAP %d: key %s pos %d") ) % filename % FT_GAPEND % tagName.Mid(1) % (*it)->end + 1);
 			tagName[0] = FT_GAPEND;
 			CTagIntSized(tagName, ((*it)->end + 1), IsLargeFile() ? 64 : 32).WriteTagToFile( &file );
 			
