# Copyright 1999-2007 Gentoo Foundation
# Distributed under the terms of the GNU General Public License v2
# $Header: $

inherit config

DESCRIPTION="Manage the /usr/bin/wx-config symlink."
MAINTAINER="dirtyepic@gentoo.org"
SVN_DATE='$Date$'
VERSION=$(svn_date_to_version "${SVN_DATE}")

WX_CONFFILE=${ROOT}/var/lib/wx-config/current
WX_CONFDIR=${ROOT}/usr/lib/wx/config

find_targets() {
	local conf
	for conf in ${WX_CONFDIR}/*; do
		[[ -f ${conf} && -x ${conf} ]] && basename ${conf}
	done
}

set_config() {
	local target="${1}" targets

	if is_number "${target}"; then
		targets=( $(find_targets) )
		[[ ${1} -ge 1 && ${1} -le ${#targets[@]} ]] \
			|| die -q "Number out of range: ${1}"
		target=${targets[$(( ${target} - 1 ))]}
	fi

	[[ -f ${WX_CONFDIR}/${target} ]] \
		|| die -q "\"${1}\" doesn't appear to be a valid configuration"

	echo "Setting ${target} as system configuration."
	store_config ${WX_CONFFILE} WXCONFIG ${target}
}

### show action ###

describe_show() {
	echo "Show the currently selected wxWidgets system configuration"
}

do_show() {
	[[ ${#@} -gt 0 ]] && die -q "Too many parameters"

	write_list_start "Currently selected wxWidgets system configuration:"
	if [[ -e ${WX_CONFFILE} ]]; then
		write_kv_list_entry "$(load_config ${WX_CONFFILE} WXCONFIG)" ""
	else
		write_kv_list_entry "(none)" ""
	fi
}

### list action ###

describe_list() {
	echo "List available wxWidgets configurations:"
}

do_list() {
	[[ ${#@} -gt 0 ]] && die -q "Too many parameters"

	local i targets
	targets=( $(find_targets) )

	if [[ -n ${targets[@]} ]]; then
		for (( i = 0; i < ${#targets[@]}; i = i + 1 )); do
			# Display a star indicating current version
			if [[ -e ${WX_CONFFILE} ]]; then
				[[ ${targets[${i}]} == $(cat ${WX_CONFFILE}) ]] \
					&& targets[${i}]="${targets[${i}]} $(highlight '*')"
			fi
		done
		write_list_start "Available wxWidgets configurations:"
		write_numbered_list "${targets[@]}"
	else
		write_kv_list_entry "(none found)" ""
	fi
}

### set action ###

describe_set() {
	echo "Set the system wxWidgets configuration"
}

describe_set_options() {
	echo "target: configuration name or number (gotten from 'list')"
}

describe_set_parameters() {
	echo "<target>"
}

do_set() {
	[[ ! ${#@} -eq 1 ]] \
		&& die -q "You must specify a configuration name or number"

	[[ -w "${ROOT}"/var/lib ]] \
		|| die -q "You need proper write permissions.  Please run as root."

	set_config "${1}"
}

### update action ###

# This is what will be called by pkg_post[inst|rm] in ebuilds.
#
# it needs to do a few different things:
#
# - if the config file is absent (ie. first install), set to a sane default
# based on the version installing
# - if the current config is valid, leave it alone
# - if the current config is invalid, set to ???
#
# there are two cases where a config might be invalid
# - was set to a config that was just uninstalled
# - was set to a config that just had the USE flags changed
#   (eg. debug -> release)
#
# should we attempt to find the closest possible replacement, or just
# set it to none?  i think the former is best, with a prominent message to the
# user that we are doing so.
#
# closest possible should probably be done in the descending order of debug,
# charset, implementation, slot.
#
# eg. given the invalid config gtk2-unicode-debug-2.8 we would attempt to set:
#
#  (gtk2-unicode-debug-2.8)
#	gtk2-unicode-release-2.8
#	gtk2-ansi-debug-2.8
#	gtk2-ansi-release-2.8
#	base-unicode-debug-2.8
#	base-unicode-release-2.8
#	base-ansi-debug-2.8
#	base-ansi-release-2.8
#	gtk2-unicode-debug-2.6
#	gtk2-unicode-release-2.6
#	gtk2-ansi-debug-2.6
#	gtk2-ansi-release-2.6
#	base-unicode-debug-2.6
#	base-unicode-release-2.6
#	base-ansi-debug-2.6
#	base-ansi-release-2.6
#
#	and then set to "none" if none are found.
#
# maybe this is overkill for something that only a small percentage of our users
# will ever use, but really it's half a dozen lines of code and easily
# extendable when we add new slots/implementations.
